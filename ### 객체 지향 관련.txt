### 객체 지향 관련

1. 객체지향 설계 **필수**
    1. 현실 객체를 게임에 필요한 부분만 **추상화** 하여 class를 만들 수 있다
    2. 필드 및 작동 방식을 숨기지만 외부에선 사용 가능하게끔 정보를 **캡슐화** 할 수 있다
    3. **상속**을 활용하여 코드의 재활용성을 올릴 수 있다
    4. 오버라이드, 오버로드 등 **다형성**을 활용하여 코드의 동작을 유연화 시킬 수 있다
    
2. 객체지향 **가산점**
    1. static을 필요한 부분에 사용하여 유연성 혹은 코드 낭비를 줄일 수 있다
    2. 생성자, 혹은 이니셜라이저를 활용하여 객체 생성을 편리하게 할 수 있다
    3. 인터페이스를 사용하여 다형성 활용도를 올릴 수 있다
    4. 델리게이트를 활용하여 함수를 객체처럼 사용할 수 있다
    
3. 객체지향 **감점**
    1. Goto 문법 사용

---

### 자료 구조 관련

1. 자료 구조 **필수 (최소 1개)**
    1. 필요한 상황에 **배열**을 선언 및 사용할 수 있다
    2. or 필요한 상황에 **List**를 선언 및 사용할 수 있다
    3. or 필요한 상황에 따라 **Dictionary**를 사용할 수 있다
    4. or 필요한 상황에 따라 **LinkedList**를 사용할 수 있다
    
2. 자료 구조 **가산점**
    1. 직접 비선형 혹은 선형 커스텀 자료구조를 만들 수 있다

---

### Git 버전 관리 관련

1. Git 버전관리 **필수**
    1. Github 원격 리포지토리에 본인의 최종 결과물이 있다
    2. 올바른 커밋 메시지와 함께 총 3번 이상의 커밋이 있다

---

### 알고리즘 구현 및 파일 분할

**구현 필수사항**

1. 클래스 혹은 기능별로 .cs 파일을 만들어서 관리할 수 있다
2. (필요할 경우) partial로 나눌 수 있다